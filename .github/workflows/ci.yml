name: CI Build for 3D & All Engines with Extras

on: [push, pull_request]

jobs:
  windows:
    name: Windows Debug Build
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - win32
          - x64
          - arm64
    env:
      CONFIGURATION: Debug
      GITHUB_TOKEN: ${{ secrets.CI_SECRET }}
      VCPKG_FEATURE_FLAGS: dependencygraph
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.platform }}-windows
      VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed
      VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/vcpkg_cache,readwrite
      GIT_VCPKG_COMMIT: b02e341c927f16d991edbd915d8ea43eac52096c
    permissions:
      contents: write # For dependencygraph
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup nasm
        uses: ilammy/setup-nasm@v1
        if: matrix.useNasm == 'true'
      - name: Force CMake < 4.0 usage
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.31'
      - name: Install vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgGitCommitId: ${{ env.GIT_VCPKG_COMMIT }}
      - name: Integrate vcpkg
        run: |
          ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/vcpkg integrate install
      - name: Restore vcpkg cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-${{ env.GIT_VCPKG_COMMIT }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json', 'vcpkg_installed/compiler-file-hash-cache.json', 'vcpkg_installed/status') }}
          restore-keys: vcpkg-${{ env.GIT_VCPKG_COMMIT }}-${{ matrix.triplet }}-
      - name: Build create_project
        run: |
          cd devtools/create_project/cmake
          cmake .
          cmake --build . -j2
          cd ../../../
      
      - name: Call create_project (Windows)
        run: |
          mkdir build-scummvm
          cd build-scummvm
          ../devtools/create_project/cmake/Debug/create_project.exe .. --msvc --vcpkg --enable-all-engines ${{ matrix.configFlags }}
          ls
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
      - name: Install vcpkg packages
        run: |
          vcpkg install
      - name: Save vcpkg cache
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-${{ env.GIT_VCPKG_COMMIT }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json', 'vcpkg_installed/compiler-file-hash-cache.json', 'vcpkg_installed/status') }}
      - name: Build scummvm
        run: |
          cd build-scummvm
          ls
          msbuild scummvm.sln /m /p:VcpkgEnableManifest=true /p:BuildInParallel=true /p:Configuration=${{ env.CONFIGURATION }} /p:PreferredToolArchitecture=x64 /p:Platform=${{ matrix.platform }} /v:minimal
      - name: Upload libs
        uses: actions/upload-artifact@v4
        if: matrix.buildArtifacts == 'true'
        with:
          name: libs-${{ matrix.triplet }}
          path: ${{ env.VCPKG_INSTALLED_DIR }}\\${{ matrix.triplet }}
      - name: Upload scummvm
        uses: actions/upload-artifact@v4
        if: matrix.buildArtifacts == 'true'
        with:
          name: scummvm-${{ matrix.arch }}
          path: build-scummvm/${{ env.CONFIGURATION }}${{ matrix.arch }}/*.exe
      - name: Upload scummvm libs
        uses: actions/upload-artifact@v4
        if: matrix.buildArtifacts == 'true'
        with:
          name: scummvm-${{ matrix.arch }}
          path: ${{ env.VCPKG_INSTALLED_DIR }}\\${{ matrix.triplet }}\\bin\\*.dll
      - name: Upload scummvm symbols
        uses: actions/upload-artifact@v4
        if: matrix.buildArtifacts == 'true'
        with:
          name: symbols-${{ matrix.arch }}
          path: build-scummvm/${{ env.CONFIGURATION }}${{ matrix.arch }}/*.pdb
      - name: Upload scummvm libs symbols
        uses: actions/upload-artifact@v4
        if: matrix.buildArtifacts == 'true'
        with:
          name: symbols-${{ matrix.arch }}
          path: ${{ env.VCPKG_INSTALLED_DIR }}\\${{ matrix.triplet }}\\bin\\*.pdb
  xcode:
    name: macOS (Xcode)
    runs-on: macos-13
    strategy:
      matrix:
        include:
          - platform: macosx
            buildFlags: -scheme ScummVM-macOS -destination 'platform=macOS,arch=x86_64'
            configFlags: --enable-all-engines --enable-3d --enable-wintermute --enable-vcruise --enable-debug --disable-nasm
          - platform: ios7
            buildFlags: -scheme ScummVM-iOS CODE_SIGN_IDENTITY="" CODE_SIGNING_ALLOWED=NO
            configFlags: --use-xcframework --enable-all-engines --enable-3d --enable-wintermute --enable-vcruise --enable-debug --disable-nasm --disable-taskbar --disable-tts
            packagesUrl: https://downloads.scummvm.org/frs/build/scummvm-ios7-libs-v3.zip
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install brew packages
        if: ${{ matrix.include.brewPackages }}
        run: brew install ${{ matrix.include.brewPackages }}
      
      - name: Download extra iOS libs
        if: ${{ matrix.include.packagesUrl }}
        run: |
          curl -L -o libs.zip ${{ matrix.include.packagesUrl }}
          unzip libs.zip
      
      - name: Build create_project (Xcode)
        run: |
          cd devtools/create_project/xcode
          xcodebuild
          cd ../../../
      
      - name: Call create_project (Xcode)
        run: |
          ./devtools/create_project/xcode/build/Release/create_project . --xcode --enable-all-engines ${{ matrix.configFlags }}
          ls
      - name: Build cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.platform }}
          max-size: 1G
          create-symlink: true
      - name: Build scummvm
        run: |
          xcodebuild CC=clang CPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++ build -project scummvm.xcodeproj ${{ matrix.include.buildFlags }} | awk '$1 !~ /^(export|cd|clang++)/'
      
  ubuntu:
    name: Ubuntu Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant:
          - name: GCC_Default
            sdlConfig: sdl2-config
            cxx: ccache g++
            aptPackages: 'liba52-dev libcurl4-openssl-dev libfaad-dev libflac-dev libfluidsynth-dev libfreetype6-dev libfribidi-dev libgif-dev libgtk-3-dev libjpeg-turbo8-dev libmad0-dev libmikmod-dev libmpeg2-4-dev libogg-dev libpng-dev libtheora-dev libvorbis-dev libvpx-dev libsdl2-dev libsdl2-net-dev'
            configFlags: --enable-all-engines --enable-3d --enable-wintermute --enable-vcruise --enable-debug --with-discord-prefix=/usr/local
    env:
      SDL_CONFIG: ${{ matrix.variant.sdlConfig }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Ubuntu packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.variant.aptPackages }}
      
      - name: Configure Ubuntu Build
        run: CXX='${{ matrix.variant.cxx }}' ./configure --enable-all-engines ${{ matrix.variant.configFlags }}
      
      - name: Build scummvm on Ubuntu
        run: make -j2
      
      - name: Run tests
        run: make test
      
      - name: Build devtools
        run: make devtools
      
  android:
    name: Android Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api_level: [21, 28, 30]
        buildType: [Debug, Release]
    env:
      CI_SECRET: ${{ secrets.CI_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: ${{ matrix.api_level }}
          target: default
          ndk: '21.1.6352462'
      
      - name: Build Android APK
        run: |
          if [ "${{ matrix.buildType }}" = "Debug" ]; then
            ./gradlew assembleDebug
          else
            ./gradlew assembleRelease
          fi
      
      - name: Run Android Unit Tests
        run: ./gradlew testDebugUnitTest
      
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v2
        with:
          name: scummvm-android-${{ matrix.api_level }}-${{ matrix.buildType }}
          path: app/build/outputs/apk/${{ matrix.buildType | tolower }}/app-${{ matrix.buildType | tolower }}*.apk
